{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>I've made this doc to explain on how to make Dragon Ball Warriors forms, since Dragon Ball Warriors do use DB Rage system as a base, it isn't really hard to modify it.</p>"},{"location":"#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Basic knowledge of ROBLOX STUDIO.</li> <li>Basic/Intermediate knowledge of LuaU. (Roblox Studio scripting language)</li> <li>Assets ready for your forms. (Hairs, auras, etc...)</li> <li>Time.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#finding-the-modules","title":"Finding the Modules","text":"<ul> <li>Find the Forms Module. <code>game.ReplicatedStorage.ModosModulos</code></li> <li>Find the Forms Multiplier Module. <code>game.ServerStorage.ModeBoostModule</code></li> <li>Find the Skills Module. <code>game.ReplicatedStorage.Skills.Skillzz</code></li> </ul>"},{"location":"#finding-the-asset-folder","title":"Finding the Asset Folder","text":"<p>The asset folder is really important, that is what stores the hair, aura and overall effects.</p> <ul> <li>The asset folder should be <code>game.ServerStorage.Skills.Assets</code></li> </ul> <p>DISCLAIMER: You need to place your assets inside this folder</p>"},{"location":"#finding-the-essential-scripts","title":"Finding the essential scripts","text":"<ul> <li>Find the transformation script. <code>game.ServerScriptService.Cosas.Tecnicas</code></li> </ul>"},{"location":"#setting-up-the-new-transformations","title":"Setting up the new transformations.","text":""},{"location":"#setting-up-forms-module","title":"Setting up Forms Module","text":"<p>First of all you need to open the <code>ModosModulos</code>, after opening it you will see a lot of indexes with: <code>modes[\"Form\"] = \"Form\"</code>, you will basically do the same. (ALWAYS PUT IT BEFORE THE RETURN MODES LINE)</p> <p>It should be like this: ModosModulos<pre><code>local modes = {} -- Line 1\n-- Stuff stuff\nmodes[\"Super Saiyan Potato\"] = \"Super Saiyan Potato\" -- Line X\nreturn modes -- Line Y (always on the end)\n</code></pre></p>"},{"location":"#setting-up-multiplier-module","title":"Setting up Multiplier Module","text":"<p>After setting up the form, you will now set up the multiplier of that form, open <code>ModeBoostModule</code>, after opening it, you may see things similar to the <code>ModosModulos</code>, you will follow the same thing.</p> <ul> <li><code>modes[\"Put the ModosModulos value that you made\"] = Multiplier</code></li> </ul> <p>It should be something like this:</p> ModeBoostModule<pre><code>    local modes = {} --line1\n    -- line line line line\n    modes[\"Super Saiyan Potato\"] = 10000\n    return modes -- Always on the last line\n</code></pre>"},{"location":"#setting-up-the-forms-requirements","title":"Setting up the Forms requirements","text":"<p>After doing everything above you will need to open the Skillz Script, it may be confusing at the start but it's easy to learn, first of all you will:</p> <ul> <li>Try to find the Modes table. Skillz<pre><code>local module = {\n    ---Ignore\n    Modes = {\n\n    };\n    --Ignore\n}\n</code></pre></li> </ul> <p>After finding it, you will need to write on a line inside the Modes table following the same example of the others.</p> Skillz<pre><code>local module = {\n    ---Ignore\n    Modes = {\n        --Ignore everything inside\n        {\"ModosModulo Form Name\", Attack, Ki, Defense}; -- IIRC it's in that order, you will put down numbers that are the forms requirement.\n    };\n    --Ignore\n}\n</code></pre> <p>If it was made correctly, it should be like this:</p> Skillz<pre><code>local module = {\n    --Ignore\n    Modes = {\n        --Ignore everything else inside\n        {\"Super Saiyan Potato\", 3500000, 3500000, 3500000};\n    }\n    --Ignore\n}\n</code></pre>"},{"location":"#setting-up-the-transformation-script","title":"Setting up the transformation script","text":"<p>Now is where the son cries and the mother doesn't sees, this will be something that may take some good time to understand and learn.</p> <p>Open the Script <code>Tecnicas</code>, after opening it i'd recommend you to press Ctrl+Shift+E, after doing it the functions should collapse and it will be easier to navigate.</p> <p>Now you will create a function like others, first of all you will insert:</p> Tecnicas<pre><code>modes[\"MODOSMODULO FORM NAME HERE\"] = function(player, toggle, data, modeNumber, animation, flying)\n\nend\n</code></pre> <p>Do you see the parameters, right? They are: <code>player, toggle, data, modeNumber, animation, flying</code>, i'll explain what theses are:</p> <ul> <li>Player, player is the player instance.</li> <li>toggle, toggle is when player pressed the button to transform, if the player wants to transform, it will be True, if the player wants to untransform, it will be False</li> <li>Data, Data is basically the character table sent from the client (idk why they named it as Data)</li> <li>ModeNumber, Useless thing, you wont use, just ignore it.</li> <li>Animation, the usual transforming animation, nothing else.</li> <li>Flying, it will tells the script if the player is flying or not.</li> </ul> <p>Theses parameters are sent by a remote function called from the client, sending thoses informations.</p> <pre><code>graph LR\n    A[Player Input] --&gt; |Info| B[Client]\n    B --&gt; |Callback| C[RemoteFunc]\n    B --&gt; |Info| C\n    C --&gt; |Callback| D[Server]\n    C --&gt; |Info| D    </code></pre> <p>Now, you will insert inside that function an If/Else Statement to check if the player wants to transform or the opposite.</p> Tecnicas<pre><code>modes[\"MODOSMODULO FORM NAME HERE\"] = function(player, toggle, data, modeNumber, animation, flying)\n    if toggle then\n        -- Here we will place the entire transformation script (True)\n    else\n        -- Here we will place the entire untransformation script (False)\nend\n</code></pre> <p>After doing that we will insert another if/else statement inside the True part inside the if toggle.</p> Tecnicas<pre><code>modes[\"MODOSMODULO FORM NAME HERE\"] = function(player, toggle, data, modeNumber, animation, flying)\n    if toggle then\n        if flying == false then\n            -- The code inside this will run if the player isn't flying while transforming, useful if you want to place some ground effects.\n        end\n\n    else\nend\n</code></pre> <p>Well, we now will continue scripting.</p> Tecnicas<pre><code>modes[\"MODOSMODULO FORM NAME HERE\"] = function(player, toggle, data, modeNumber, animation, flying)\n    if toggle then\n        animationBind(animation) -- This line of code will make the player start doing the charge animation to transform. (Optional)\n        if flying == false then\n            task.spawn(function()\n                Rocks(20, data)\n                -- IF THE PLAYER ISN'T FLYING, THEN THE SCRIPT WILL SPAWN A FUNCTION (That won't yield the entire script) WHICH SPAWN ROCKS! (Optional)\n            )\n        end\n    else\nend\n</code></pre> <p>As you can see, we added some new things, basically task.spawn spawns a function that doesn't yields the entire script, i'd recommend you taking a look at here: </p>"}]}